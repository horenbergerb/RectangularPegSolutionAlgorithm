This is an implementation of the impressive new solution to the Rectangular Peg Problem.
The implementation itself is not very impressive.
See here for the original paper: #https://arxiv.org/pdf/2005.09193.pdf

FAQ:
"How do I add my own curve?"
  You can change the definition of the data set in the curve_data function
  
"The solution rectangle is tiny"
  You'll probably see one red dot at the origin and one red dot on the curve. This is a failure of the program to detect lambdaX{0} because the curve samples are too widely spaced. You can possibly fix this by making 'curve_interval' smaller, or, if that's not convenient, making 'atol' bigger (Caution: this causes problems. See next question)

"The solution rectangle is inaccurate"
  If you're not dealing with the previous case, this is probably because atol is too large, thus excluding the correct solution. It's recommended you turn down 'atol' and then incrementally turn down 'curve_interval' until you get a better answer


TO DO:
Fix the language in the intersection function to be general. It's still specific to when I was calculating stuff for M and M_phi directly.
Implement more efficient search algorithms (how much better can they get?)
Implement more shortcuts out of the paper (are there any? look at the supplemental proofs)
Create a more rigorous tuning process for parameters
  I'd like to automatically pick curve sample intervals that divide the length of the curve