##########
#Overview#
##########
This is an implementation of the impressive new solution to the Rectangular Peg Problem.
The implementation itself is not very impressive.
See here for the original paper: #https://arxiv.org/pdf/2005.09193.pdf

I use a variation on the closest pair algorithm to find the two points which this proof shows must exist. These two points can be used to generate the rectangle of a desired angle

Simple use steps:
1) Run CurveDrawer.py
2) Hold down the left mouse button and slowly draw a smooth Jordan curve (basically a loop)
3) Release the left mouse button
4) Run ProofImplementationOptimized.py
5) Wait
6) Rejoice

Here are parameters you can play with:
'phi' in ProofImplementationOptimized.py (near the top) determines the angle between diagonals (and thus the proportion of W:H) of the desired rectangle
'res' in CurveDrawer.py changes the sampling resolution of the custom-drawn curves

#####
#FAQ#
#####
"How do I change the rectangle proportions?"
  The proportions are specified by the angle of the diagonal. This variable is 'phi' in ProofImplementation and ProofImplementationOptimized.py
  
"How do I use a function-generated curve?"
  To use a curve sampled from a function, delete customshape.txt and change the definition of the data set in the curve_data function. This is used whenever customshape.txt is not found
  
"The solution rectangle is tiny"
  You'll probably see one red dot at the origin and one red dot on the curve. This is a failure of the program to detect lambdaX{0} because the curve samples are too widely spaced.
  For curves generated by CurveDrawer, make the 'res' variable smaller and play with atol..
  For curves generated by functions, you can possibly fix this by making 'curve_interval' smaller, or, if that's not convenient, making 'atol' bigger (Caution: this causes problems. See next question).

"The solution rectangle is inaccurate"
  If you're not dealing with the previous case, this is probably because atol is too large, thus excluding the correct solution. It's recommended you turn down 'atol' and then incrementally turn down 'curve_interval' or 'res' (depending on whether you're using a custom curve or function) until you get a better answer

########################
#My personal To-Do list#
########################
  Fix the language in the intersection function to be general. It's still specific to when I was calculating stuff for M and M_phi and that no longer makes sense.

  Implement more shortcuts out of the paper (are there any? look at the supplemental proofs)

  Either utilize or erase M and M_phi in the code (related to previous)

  Create a more rigorous tuning process for parameters

  Clean up comments and eliminate any bad code

  Start thinking about other relevant visualizations